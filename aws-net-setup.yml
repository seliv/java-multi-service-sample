AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a network environment for Sample Multi-Service Project.

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.10.10.0/24
    PublicSubnet1:
      CIDR: 10.10.10.0/27
    PrivateSubnet1:
      CIDR: 10.10.10.32/27
    PublicSubnet2:
      CIDR: 10.10.10.64/27
    PrivateSubnet2:
      CIDR: 10.10.10.96/27
  CodeBuildImages:
    Main:
      ImageName: aws/codebuild/standard:5.0

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc        
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicSubnet1
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateSubnet1
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicSubnet2
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateSubnet2
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet2

## Gateways          
  # Internet Gateway        
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-internet-gateway      
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  # Elastic IPs
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc      
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc      

  # NAT Gateways
  NatGateway1:
    DependsOn: GatewayToInternet
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP1
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-gateway1
  NatGateway2:
    DependsOn: GatewayToInternet
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP2
        - AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-gateway2
   
## Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-route-table         
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-table1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-table2

## Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

## Subnet Route Table Associations   
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1     
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2 
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1     
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2 
      RouteTableId: !Ref PrivateRouteTable2

## SecurityGroups
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub ${AWS::StackName} Load Balancer Security Group  
      VpcId: !Ref 'VPC'
      SecurityGroupEgress: 
        - Description: Allow outbound HTTP with the Internet
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress: 
        - Description: Expose HTTP to the world
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Load Balancer SG           

  FargateSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub ${AWS::StackName} Fargate Security Group  
      VpcId: !Ref 'VPC'
      SecurityGroupEgress: 
        - Description: Allow outbound HTTP access to the Internet.
          IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - Description: Allow HTTP access to the Internet.
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Fargate SG           

## Load Balancer
  LoadBalancer:
    DependsOn: GatewayToInternet
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - !Ref LoadBalancerSG
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer          
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-target-group
      Port: 80
      Protocol: HTTP
      TargetType: ip # Needed for Fargate
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer-target-group
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
#      Name: !Sub ${AWS::StackName}-load-balancer-listener
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP   

## S3 Bucket for Artifacts and State
  ArtifactStore:
    Type: AWS::S3::Bucket
#    DeletionPolicy: Retain
#    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-artifact-store-bucket
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: false
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-artifact-store-bucket

## IAM Roles

  # CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:${AWS::Partition}:s3:::${ArtifactStore}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ImageRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  # CodePipeline
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow access to CodeCommit
#              - Resource: !GetAtt SourceRepository.Arn
#                Effect: Allow
#                Action:
#                  - 'codecommit:GetBranch'
#                  - 'codecommit:GetCommit'
#                  - 'codecommit:UploadArchive'
#                  - 'codecommit:GetUploadArchiveStatus'
#                  - 'codecommit:CancelUploadArchive'
              - Resource: !Ref GitHubConnection
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection
              - Resource: !Sub arn:${AWS::Partition}:s3:::${ArtifactStore}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: [ !GetAtt CodeBuildServiceRole.Arn, !GetAtt TaskExecutionRole.Arn ]
                Effect: Allow
                Action: iam:PassRole                  
              - Resource: !GetAtt CodeBuildProject.Arn
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
              - Resource: !Sub arn:${AWS::Partition}:ecs:*:${AWS::AccountId}:service/*
                Effect: Allow
                Action:
                  - ecs:DescribeServices
#              - Resource: !Ref FargateService
#                Effect: Allow
#                Action:
#                  - ecs:UpdateService
              - Resource: !Sub arn:${AWS::Partition}:ecs:*:${AWS::AccountId}:task/*
                Effect: Allow
                Action:
                  - ecs:DescribeTasks
              - Resource: !Sub arn:${AWS::Partition}:ecs:*:${AWS::AccountId}:container-instance/*
                Effect: Allow
                Action:
                  - ecs:ListTasks
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:DescribeTaskDefinition
                  - ecs:RegisterTaskDefinition

  # ECS/Fargate
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy


## Fargate Hosting
  ImageRepository:
    Type: AWS::ECR::Repository
#    DeletionPolicy: Retain
#    UpdateReplacePolicy: Retain
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-ecr

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub ${AWS::StackName}-ecs-cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 30

  FargateService:
    Type: AWS::ECS::Service
    DependsOn: [ LoadBalancerListener ]
    Properties:
      ServiceName: !Sub ${AWS::StackName}-ecs-service
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateSG
          Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      LoadBalancers:
        - ContainerName: multi-service-sample-app
          ContainerPort: 80
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-multi-service-sample-task
      RequiresCompatibilities: [ FARGATE ]
      Memory: '512'
      Cpu: '256'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: multi-service-sample-app
          Image: amazon/amazon-ecs-sample
          Essential: true
          Memory: 256
          MountPoints:
            - SourceVolume: my-volume
              ContainerPath: /var/www/my-volume
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
      Volumes:
        - Name: my-volume


## CI/CD
  # GitHub Connection
  # !!! CloudFormation creates a connection in pending state. It must be manually approved via AWS Console.
  GitHubConnection:
    Type: 'AWS::CodeStarConnections::Connection'
    Properties:
      ConnectionName: !Sub ${AWS::StackName}-github-connection
      ProviderType: GitHub

  # CodePipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStore
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeStarSourceConnection
              Configuration:
                FullRepositoryId: seliv/java-multi-service-sample
                BranchName: dev
#                RepositoryName: java-multi-service-sample
                ConnectionArn: !Ref GitHubConnection
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput                
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: ECS
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref FargateService
                FileName: images.json
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
  # CodeBuild 
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true # Allows access to Docker daemon
        Image: !FindInMap [ CodeBuildImages, Main, ImageName ]
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageRepository}
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole


## Outputs     
Outputs:
  LoadBalancerUrl:
    Description: The URL for the Application Load Balancer in front of the Fargate service.
    Value: !Sub http://${LoadBalancer.DNSName}
  CodePipelineName:
    Description: The name of the CodePipeline pipeline.
    Value: !Ref Pipeline
  CodePipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
